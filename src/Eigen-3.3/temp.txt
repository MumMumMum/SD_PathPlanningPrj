#include <iostream>
#include <vector>
#include "Eigen-3.3/Eigen/Core"
#include "Eigen-3.3/Eigen/QR"
#include "helper.h"

using namespace std;

class Vehicle{
	vector<double> start_state;
	int _id;
	double_x;
	double _y;
	double _vx;
	double _vy;
	double _s;
	double _d;
public:
	Vehicle(int id,double x,double y,double vx, double vy, double s, double d){
		_id = id;
		_x = x;
		_y = y;
		_vx = vx;
		_vy = vy;
		_s = s;
		_d = d;
	}
	Vehicle(vector<double> state){
		start_state = state;
	};
	 
	vector<double> state_In(double t){
		vector <double> state;
		double s0 = start_state[0];
		double s1 = start_state[1];
		double s2 = start_state[2];
		double d0 = start_state[3];
		double d1 = start_state[4];
		double d2 = start_state[5];

		double temp = s0 +(s1*t)+0.5*(s2*t*t);
		state.push_back(temp);

		temp = s1+s2*t;
		state.push_back(temp);

		temp = s2;
		state.push_back(temp);


		temp = d0 +(d1*t)+0.5*(d2*t*t);
		state.push_back(temp);

		temp = d1+d2*t;
		state.push_back(temp);

		temp = d2;
		state.push_back(temp);
		 
		return state;

	}

};


/*"""
    A function that returns a value between 0 and 1 for x in the 
    range [0, infinity] and -1 to 1 for x in the range [-infinity, infinity].

    Useful for cost functions.
    """*/


/*static double logistic (double x){

   
    return 2.0 / (1 + exp(-x)) - 1.0;
}

static double sigmoid (double x){

   
    return 1.0 / (1 + exp(-x)) ;
}*/
